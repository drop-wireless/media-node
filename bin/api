#!/usr/bin/env node

const debug = require("debug")("reporting:worker");
// const util   = require("util"),
const fs    = require('fs');
const ntpClient = require('ntp-client');
const cluster = require('cluster');
var environment = process.env.NODE_ENV || 'development';
const { spawn, exec } = require("child_process");

if(environment == 'development'){
    config = JSON.parse(fs.readFileSync('./config/defaults.json', 'utf-8'));
}
else{
    config = JSON.parse(fs.readFileSync(`./config/${environment}.json`, 'utf-8'));
}

const pjson  = require("../package.json");
const e = require("cors");

if(cluster.isMaster) {
    for(let i = 0;i<2;i++) {
        cluster.fork();
    }

    Object.keys(cluster.workers).forEach(function (id) {
        console.log("I am running with ID : " + cluster.workers[id].process.pid);
    });

    cluster.on('exit', function (worker, code, signal) {
        console.log('worker ' + worker.process.pid + ' died');
    });
}
else if(cluster.worker.id === 1){
    console.log(`From worker id`, cluster.worker.id)

    let Report = require("../server/lib/Reporter");
    let report;
    let interval = setInterval(() => {
        console.log(config.reporter.url);
        if(config.router.isConfigured === true) {
            ntpClient.getNetworkTime("pool.ntp.org", 123, function(err, date) {
                if(err) {
                    console.log("Process Not Started : Due to error : ",err)
                    return;
                }
                
                let sysTime =new Date().toISOString()
                console.log("NTP time : ",date);
                console.log("System time : ",sysTime)
                let diff = Math.abs((new Date(date) - new Date(sysTime))/1000)
                console.log(diff)
                if (diff < 10){
                    console.log("Starting Process")
                    report = new Report();
                    keepGSTDOn();
                    // console.log("Starting GSTDaemon");
                    // exec("gstd -e", (err, stdout, stderr) => console.log(stdout));
                    stopTimer();
                }else {
                    console.log("Process Not Started")
                }
            });
        } else {
            if(environment == 'development'){
                config = JSON.parse(fs.readFileSync('./config/defaults.json', 'utf-8'));
            } else{
                config = JSON.parse(fs.readFileSync(`./config/${environment}.json`, 'utf-8'));
            }
            console.log("Router Config Check : ", config.router.isConfigured);
            if(config.router.isConfigured === true) {
                process.exit(2);
            }
        }
    }, 10000); // 90 second

    function stopTimer() {
        clearInterval(interval)
    }
}else {
    console.log(`From worker id`, cluster.worker.id)
    const http  = require("http");
    const server = require("../server");
    const host  = config.host;
    const port  = config.port;
    const app   = http.createServer(server);

    app.listen(port, host, () => {
        process.title = pjson.name + " " + pjson.version;
        process.title = util.format("%s %s listening on %s:%s", pjson.name, pjson.version, host, port);
        console.log("API service started on %s:%s", host, port);
    });

}


let gstInterval;
const keepGSTDOn = async function() {
    if (gstInterval == null) {
        gstInterval = setInterval(async () => {
            try {
                if (await isGSTDRunning()) {
                    clearInterval(gstInterval);
                    gstInterval = null;
                    console.log("gstd is running");
                }
                else {
                    console.log("Starting GSTDaemon");
                    exec("gstd -e", (err, stdout, stderr) => console.log(stdout));
                }
            } catch (e) {
                console.log("Error on gstd interval:", e);
            }
        }, 10000);
    }
}
const isGSTDRunning = function() {
    return new Promise(function (resolve, reject) {
        exec(`ps -A | grep 'gstd'`, (err, stdout, stderr) => {
            if (err) {
                if (err.code === 1)   // no output, not matched
                    resolve(false);
                else 
                    reject(err);
            }
            if (stdout)
                resolve(stdout.toLowerCase().indexOf('gstd') > -1);
        });
    });
}

/**
 * Start http server and attach signal handlers.
 */
let stop = async function(msg) {
    // await blockListener.disconnectChain();
    process.exit();
};

process.on("uncaughtException", function(err) {
    debug(err.stack);
    debug("uncaughtException", err);
}).on("SIGINT", function() {
    stop("Received SIGINT Ctrl+C signal.API service shutdown.");
}).on("SIGTERM", function() {
    stop("Received SIGTERM signal. API service shutdown.");
}).on("exit", function() {
    stop("API service shutdown.");
});
